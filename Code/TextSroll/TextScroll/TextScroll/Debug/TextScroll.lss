
TextScroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800164  00800164  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fde  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000572  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ce  00000000  00000000  00002a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e5       	ldi	r30, 0x56	; 86
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 36       	cpi	r26, 0x64	; 100
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e6       	ldi	r26, 0x64	; 100
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 36       	cpi	r26, 0x68	; 104
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 99 01 	call	0x332	; 0x332 <main>
  ea:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <LCD_LineJmp>:
	if (row == 0 && pos<16)
	LCD_LineJmp((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
	LCD_LineJmp((pos & 0x0F)|0xC0);
	LCD_Print(str);
}
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	9f 70       	andi	r25, 0x0F	; 15
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240
  fa:	92 2b       	or	r25, r18
  fc:	9b b9       	out	0x0b, r25	; 11
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	9e 7f       	andi	r25, 0xFE	; 254
 102:	9b b9       	out	0x0b, r25	; 11
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	92 60       	ori	r25, 0x02	; 2
 108:	9b b9       	out	0x0b, r25	; 11
 10a:	00 00       	nop
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	9d 7f       	andi	r25, 0xFD	; 253
 110:	9b b9       	out	0x0b, r25	; 11
 112:	32 e4       	ldi	r19, 0x42	; 66
 114:	3a 95       	dec	r19
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_LineJmp+0x22>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_LineJmp+0x28>
 11a:	2b b1       	in	r18, 0x0b	; 11
 11c:	30 e1       	ldi	r19, 0x10	; 16
 11e:	83 9f       	mul	r24, r19
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	92 2f       	mov	r25, r18
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	89 2b       	or	r24, r25
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	8b b9       	out	0x0b, r24	; 11
 132:	00 00       	nop
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	83 ef       	ldi	r24, 0xF3	; 243
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_LineJmp+0x4c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_LineJmp+0x52>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <LCD_Clear>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_LineJmp>
 14e:	83 ef       	ldi	r24, 0xF3	; 243
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Clear+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Clear+0x10>
 158:	00 00       	nop
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_LineJmp>
 160:	08 95       	ret

00000162 <LCD_Print>:
 162:	fc 01       	movw	r30, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	2c c0       	rjmp	.+88     	; 0x1c2 <LCD_Print+0x60>
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	98 2b       	or	r25, r24
 172:	9b b9       	out	0x0b, r25	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	00 00       	nop
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	8b b9       	out	0x0b, r24	; 11
 188:	82 e4       	ldi	r24, 0x42	; 66
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Print+0x28>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Print+0x2e>
 190:	4b b1       	in	r20, 0x0b	; 11
 192:	9c 91       	ld	r25, X
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	98 9f       	mul	r25, r24
 198:	90 01       	movw	r18, r0
 19a:	11 24       	eor	r1, r1
 19c:	94 2f       	mov	r25, r20
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	29 2b       	or	r18, r25
 1a2:	2b b9       	out	0x0b, r18	; 11
 1a4:	9b b1       	in	r25, 0x0b	; 11
 1a6:	92 60       	ori	r25, 0x02	; 2
 1a8:	9b b9       	out	0x0b, r25	; 11
 1aa:	00 00       	nop
 1ac:	9b b1       	in	r25, 0x0b	; 11
 1ae:	9d 7f       	andi	r25, 0xFD	; 253
 1b0:	9b b9       	out	0x0b, r25	; 11
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Print+0x54>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Print+0x5a>
 1bc:	00 00       	nop
 1be:	6f 5f       	subi	r22, 0xFF	; 255
 1c0:	7f 4f       	sbci	r23, 0xFF	; 255
 1c2:	df 01       	movw	r26, r30
 1c4:	a6 0f       	add	r26, r22
 1c6:	b7 1f       	adc	r27, r23
 1c8:	9c 91       	ld	r25, X
 1ca:	91 11       	cpse	r25, r1
 1cc:	ce cf       	rjmp	.-100    	; 0x16a <LCD_Print+0x8>
 1ce:	08 95       	ret

000001d0 <Scroll>:
	Scroll();
	_delay_ms(1500);
}

void Scroll()
{
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	
	
	int TextLength = strlen(largetext);   //find Length of string
 1dc:	e0 e0       	ldi	r30, 0x00	; 0
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	01 90       	ld	r0, Z+
 1e2:	00 20       	and	r0, r0
 1e4:	e9 f7       	brne	.-6      	; 0x1e0 <Scroll+0x10>
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	9f 01       	movw	r18, r30
 1ea:	20 50       	subi	r18, 0x00	; 0
 1ec:	31 40       	sbci	r19, 0x01	; 1
 1ee:	79 01       	movw	r14, r18
 1f0:	e9 01       	movw	r28, r18
	
	if(cursor == (TextLength - 1))  // Resets variable for Roll Over effect
 1f2:	89 01       	movw	r16, r18
 1f4:	01 50       	subi	r16, 0x01	; 1
 1f6:	11 09       	sbc	r17, r1
 1f8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 1fc:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <__data_end+0x1>
 200:	08 17       	cp	r16, r24
 202:	19 07       	cpc	r17, r25
 204:	19 f4       	brne	.+6      	; 0x20c <Scroll+0x3c>
	{
		
		LCD_LineJmp (0x80);		//Move to Position Line 1, Position 1
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_LineJmp>
	}
	
	if( cursor <TextLength-16  )    //For normal 16 character
 20c:	30 e1       	ldi	r19, 0x10	; 16
 20e:	e3 1a       	sub	r14, r19
 210:	f1 08       	sbc	r15, r1
 212:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 216:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <__data_end+0x1>
 21a:	8e 15       	cp	r24, r14
 21c:	9f 05       	cpc	r25, r15
 21e:	64 f5       	brge	.+88     	; 0x278 <Scroll+0xa8>
	{
		for(ichar = cursor; ichar <cursor +16;ichar++ )
 220:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ichar+0x1>
 224:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ichar>
 228:	19 c0       	rjmp	.+50     	; 0x25c <Scroll+0x8c>
		{
			LCD_Print(largetext[ichar]);  // prints message to LCD
 22a:	fc 01       	movw	r30, r24
 22c:	e0 50       	subi	r30, 0x00	; 0
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	80 81       	ld	r24, Z
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e9       	ldi	r24, 0x9F	; 159
 23a:	96 e8       	ldi	r25, 0x86	; 134
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	20 40       	sbci	r18, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <Scroll+0x6e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <Scroll+0x78>
 248:	00 00       	nop
		LCD_LineJmp (0x80);		//Move to Position Line 1, Position 1
	}
	
	if( cursor <TextLength-16  )    //For normal 16 character
	{
		for(ichar = cursor; ichar <cursor +16;ichar++ )
 24a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 24e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ichar+0x1>
 258:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ichar>
 25c:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__data_end>
 260:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__data_end+0x1>
 264:	20 5f       	subi	r18, 0xF0	; 240
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 26c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 270:	82 17       	cp	r24, r18
 272:	93 07       	cpc	r25, r19
 274:	d4 f2       	brlt	.-76     	; 0x22a <Scroll+0x5a>
 276:	56 c0       	rjmp	.+172    	; 0x324 <Scroll+0x154>
			_delay_ms(500);
		}
	}
	else
	{
		for(ichar = cursor; ichar< (TextLength -1);ichar++)  // prints characters of current string
 278:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ichar+0x1>
 27c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ichar>
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <Scroll+0xe4>
		{
			LCD_Print(largetext[ichar]);  // prints message to LCD
 282:	fc 01       	movw	r30, r24
 284:	e0 50       	subi	r30, 0x00	; 0
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	80 81       	ld	r24, Z
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
 290:	3f e9       	ldi	r19, 0x9F	; 159
 292:	86 e8       	ldi	r24, 0x86	; 134
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	31 50       	subi	r19, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <Scroll+0xc6>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Scroll+0xd0>
 2a0:	00 00       	nop
			_delay_ms(500);
		}
	}
	else
	{
		for(ichar = cursor; ichar< (TextLength -1);ichar++)  // prints characters of current string
 2a2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 2a6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ichar+0x1>
 2b0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ichar>
 2b4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 2b8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 2bc:	80 17       	cp	r24, r16
 2be:	91 07       	cpc	r25, r17
 2c0:	04 f3       	brlt	.-64     	; 0x282 <Scroll+0xb2>
		{
			LCD_Print(largetext[ichar]);  // prints message to LCD
			_delay_ms(500);
		}
		for(ichar =0; ichar <= 16 -(TextLength -cursor);ichar++)
 2c2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ichar+0x1>
 2c6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ichar>
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <Scroll+0x12e>
		{
			LCD_Print(largetext[ichar]);  // prints message to LCD
 2cc:	fc 01       	movw	r30, r24
 2ce:	e0 50       	subi	r30, 0x00	; 0
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
 2da:	2f e9       	ldi	r18, 0x9F	; 159
 2dc:	36 e8       	ldi	r19, 0x86	; 134
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	30 40       	sbci	r19, 0x00	; 0
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <Scroll+0x110>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <Scroll+0x11a>
 2ea:	00 00       	nop
		for(ichar = cursor; ichar< (TextLength -1);ichar++)  // prints characters of current string
		{
			LCD_Print(largetext[ichar]);  // prints message to LCD
			_delay_ms(500);
		}
		for(ichar =0; ichar <= 16 -(TextLength -cursor);ichar++)
 2ec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 2f0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ichar+0x1>
 2fa:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ichar>
 2fe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 302:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <__data_end+0x1>
 306:	9e 01       	movw	r18, r28
 308:	28 1b       	sub	r18, r24
 30a:	39 0b       	sbc	r19, r25
 30c:	c9 01       	movw	r24, r18
 30e:	20 e1       	ldi	r18, 0x10	; 16
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	28 1b       	sub	r18, r24
 314:	39 0b       	sbc	r19, r25
 316:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ichar>
 31a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ichar+0x1>
 31e:	28 17       	cp	r18, r24
 320:	39 07       	cpc	r19, r25
 322:	a4 f6       	brge	.-88     	; 0x2cc <Scroll+0xfc>
			_delay_ms(500);
		}
	}
	
	
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <main>:
int ichar;
char largetext[100] = " Understanding Scrolling text on 16x2 LCD Display.  ";

int main(void)
{
	LCD_Clear();
 332:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Clear>
	Scroll();
 336:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Scroll>
 33a:	2f ed       	ldi	r18, 0xDF	; 223
 33c:	83 e9       	ldi	r24, 0x93	; 147
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0xe>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x18>
 34a:	00 00       	nop
	_delay_ms(1500);
}
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
